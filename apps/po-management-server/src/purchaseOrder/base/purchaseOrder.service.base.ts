/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchaseOrder as PrismaPurchaseOrder,
  ApprovalWorkflow as PrismaApprovalWorkflow,
} from "@prisma/client";

export class PurchaseOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseOrder.count(args);
  }

  async purchaseOrders(
    args: Prisma.PurchaseOrderFindManyArgs
  ): Promise<PrismaPurchaseOrder[]> {
    return this.prisma.purchaseOrder.findMany(args);
  }
  async purchaseOrder(
    args: Prisma.PurchaseOrderFindUniqueArgs
  ): Promise<PrismaPurchaseOrder | null> {
    return this.prisma.purchaseOrder.findUnique(args);
  }
  async createPurchaseOrder(
    args: Prisma.PurchaseOrderCreateArgs
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.create(args);
  }
  async updatePurchaseOrder(
    args: Prisma.PurchaseOrderUpdateArgs
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.update(args);
  }
  async deletePurchaseOrder(
    args: Prisma.PurchaseOrderDeleteArgs
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.delete(args);
  }

  async findApprovalWorkflows(
    parentId: string,
    args: Prisma.ApprovalWorkflowFindManyArgs
  ): Promise<PrismaApprovalWorkflow[]> {
    return this.prisma.purchaseOrder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approvalWorkflows(args);
  }
}
