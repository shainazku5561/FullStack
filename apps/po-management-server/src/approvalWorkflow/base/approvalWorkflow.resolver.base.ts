/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApprovalWorkflow } from "./ApprovalWorkflow";
import { ApprovalWorkflowCountArgs } from "./ApprovalWorkflowCountArgs";
import { ApprovalWorkflowFindManyArgs } from "./ApprovalWorkflowFindManyArgs";
import { ApprovalWorkflowFindUniqueArgs } from "./ApprovalWorkflowFindUniqueArgs";
import { CreateApprovalWorkflowArgs } from "./CreateApprovalWorkflowArgs";
import { UpdateApprovalWorkflowArgs } from "./UpdateApprovalWorkflowArgs";
import { DeleteApprovalWorkflowArgs } from "./DeleteApprovalWorkflowArgs";
import { PurchaseOrder } from "../../purchaseOrder/base/PurchaseOrder";
import { User } from "../../user/base/User";
import { ApprovalWorkflowService } from "../approvalWorkflow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApprovalWorkflow)
export class ApprovalWorkflowResolverBase {
  constructor(
    protected readonly service: ApprovalWorkflowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "read",
    possession: "any",
  })
  async _approvalWorkflowsMeta(
    @graphql.Args() args: ApprovalWorkflowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApprovalWorkflow])
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "read",
    possession: "any",
  })
  async approvalWorkflows(
    @graphql.Args() args: ApprovalWorkflowFindManyArgs
  ): Promise<ApprovalWorkflow[]> {
    return this.service.approvalWorkflows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApprovalWorkflow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "read",
    possession: "own",
  })
  async approvalWorkflow(
    @graphql.Args() args: ApprovalWorkflowFindUniqueArgs
  ): Promise<ApprovalWorkflow | null> {
    const result = await this.service.approvalWorkflow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApprovalWorkflow)
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "create",
    possession: "any",
  })
  async createApprovalWorkflow(
    @graphql.Args() args: CreateApprovalWorkflowArgs
  ): Promise<ApprovalWorkflow> {
    return await this.service.createApprovalWorkflow({
      ...args,
      data: {
        ...args.data,

        purchaseOrder: args.data.purchaseOrder
          ? {
              connect: args.data.purchaseOrder,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApprovalWorkflow)
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "update",
    possession: "any",
  })
  async updateApprovalWorkflow(
    @graphql.Args() args: UpdateApprovalWorkflowArgs
  ): Promise<ApprovalWorkflow | null> {
    try {
      return await this.service.updateApprovalWorkflow({
        ...args,
        data: {
          ...args.data,

          purchaseOrder: args.data.purchaseOrder
            ? {
                connect: args.data.purchaseOrder,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApprovalWorkflow)
  @nestAccessControl.UseRoles({
    resource: "ApprovalWorkflow",
    action: "delete",
    possession: "any",
  })
  async deleteApprovalWorkflow(
    @graphql.Args() args: DeleteApprovalWorkflowArgs
  ): Promise<ApprovalWorkflow | null> {
    try {
      return await this.service.deleteApprovalWorkflow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PurchaseOrder, {
    nullable: true,
    name: "purchaseOrder",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "read",
    possession: "any",
  })
  async getPurchaseOrder(
    @graphql.Parent() parent: ApprovalWorkflow
  ): Promise<PurchaseOrder | null> {
    const result = await this.service.getPurchaseOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: ApprovalWorkflow
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
